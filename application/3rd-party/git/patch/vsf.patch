 progress.c | 23 ++++++++++++-----------
 progress.h | 12 ++++++------
 2 files changed, 18 insertions(+), 17 deletions(-)

diff --git a/progress.c b/progress.c
index cad6c2b064..ecf460acc8 100644
--- a/progress.c
+++ b/progress.c
@@ -33,8 +33,8 @@ struct throughput {
 
 struct progress {
 	const char *title;
-	uint64_t last_value;
-	uint64_t total;
+	uint32_t last_value;
+	uint32_t total;
 	unsigned last_percent;
 	unsigned delay;
 	unsigned sparse;
@@ -129,7 +129,7 @@ static int is_foreground_fd(int fd)
 	return tpgrp < 0 || tpgrp == getpgid(0);
 }
 
-static void display(struct progress *progress, uint64_t n, const char *done)
+static void display(struct progress *progress, uint32_t n, const char *done)
 {
 	const char *tp;
 	struct strbuf *counters_sb = &progress->counters_sb;
@@ -148,8 +148,9 @@ static void display(struct progress *progress, uint64_t n, const char *done)
 
 			strbuf_reset(counters_sb);
 			strbuf_addf(counters_sb,
-				    "%3u%% (%"PRIuMAX"/%"PRIuMAX")%s", percent,
-				    (uintmax_t)n, (uintmax_t)progress->total,
+//				    "%3u%% (%"PRIuMAX"/%"PRIuMAX")%s", percent,
+				    "%3u%% (%d/%d)%s", percent,
+				    (uint32_t)n, (uint32_t)progress->total,
 				    tp);
 			show_update = 1;
 		}
@@ -208,7 +209,7 @@ static uint64_t progress_getnanotime(struct progress *progress)
 		return getnanotime();
 }
 
-void display_throughput(struct progress *progress, uint64_t total)
+void display_throughput(struct progress *progress, uint32_t total)
 {
 	struct throughput *tp;
 	uint64_t now_ns;
@@ -268,7 +269,7 @@ void display_throughput(struct progress *progress, uint64_t total)
 		display(progress, progress->last_value, NULL);
 }
 
-void display_progress(struct progress *progress, uint64_t n)
+void display_progress(struct progress *progress, uint32_t n)
 {
 	if (progress)
 		display(progress, n, NULL);
@@ -311,12 +312,12 @@ static int get_default_delay(void)
 #endif
 }
 
-struct progress *start_delayed_progress(const char *title, uint64_t total)
+struct progress *start_delayed_progress(const char *title, uint32_t total)
 {
 	return start_progress_delay(title, total, get_default_delay(), 0);
 }
 
-struct progress *start_progress(const char *title, uint64_t total)
+struct progress *start_progress(const char *title, uint32_t total)
 {
 	return start_progress_delay(title, total, 0, 0);
 }
@@ -330,13 +331,13 @@ struct progress *start_progress(const char *title, uint64_t total)
  * When "sparse" is set, stop_progress() will automatically force the done
  * message to show 100%.
  */
-struct progress *start_sparse_progress(const char *title, uint64_t total)
+struct progress *start_sparse_progress(const char *title, uint32_t total)
 {
 	return start_progress_delay(title, total, 0, 1);
 }
 
 struct progress *start_delayed_sparse_progress(const char *title,
-					       uint64_t total)
+					       uint32_t total)
 {
 	return start_progress_delay(title, total, get_default_delay(), 1);
 }
diff --git a/progress.h b/progress.h
index f1913acf73..37ed976acd 100644
--- a/progress.h
+++ b/progress.h
@@ -11,13 +11,13 @@ void progress_test_force_update(void);
 
 #endif
 
-void display_throughput(struct progress *progress, uint64_t total);
-void display_progress(struct progress *progress, uint64_t n);
-struct progress *start_progress(const char *title, uint64_t total);
-struct progress *start_sparse_progress(const char *title, uint64_t total);
-struct progress *start_delayed_progress(const char *title, uint64_t total);
+void display_throughput(struct progress *progress, uint32_t total);
+void display_progress(struct progress *progress, uint32_t n);
+struct progress *start_progress(const char *title, uint32_t total);
+struct progress *start_sparse_progress(const char *title, uint32_t total);
+struct progress *start_delayed_progress(const char *title, uint32_t total);
 struct progress *start_delayed_sparse_progress(const char *title,
-					       uint64_t total);
+					       uint32_t total);
 void stop_progress(struct progress **progress);
 void stop_progress_msg(struct progress **progress, const char *msg);
 
