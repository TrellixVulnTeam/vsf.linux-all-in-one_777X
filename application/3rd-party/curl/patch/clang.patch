 lib/curl_ntlm_core.c |  2 +-
 lib/curl_setup.h     |  4 ++--
 lib/progress.c       | 60 ++++++++++++++++++++++++++--------------------------
 src/tool_cb_prg.c    |  2 +-
 src/tool_operate.c   |  2 +-
 src/tool_progress.c  | 32 ++++++++++++++--------------
 6 files changed, 51 insertions(+), 51 deletions(-)

diff --git a/lib/curl_ntlm_core.c b/lib/curl_ntlm_core.c
index ed123d0c1..46b8fb1d6 100644
--- a/lib/curl_ntlm_core.c
+++ b/lib/curl_ntlm_core.c
@@ -526,7 +526,7 @@ struct ms_filetime {
 static void time2filetime(struct ms_filetime *ft, time_t t)
 {
 #if SIZEOF_TIME_T > 4
-  t = (t + CURL_OFF_T_C(11644473600)) * 10000000;
+  t = (t + (11644473600LL)) * 10000000;
   ft->dwLowDateTime = (unsigned int) (t & 0xFFFFFFFF);
   ft->dwHighDateTime = (unsigned int) (t >> 32);
 #else
diff --git a/lib/curl_setup.h b/lib/curl_setup.h
index 05971206f..6d52c8ca2 100644
--- a/lib/curl_setup.h
+++ b/lib/curl_setup.h
@@ -432,12 +432,12 @@
 #endif
 
 #if (SIZEOF_CURL_OFF_T == 4)
-#  define CURL_OFF_T_MAX CURL_OFF_T_C(0x7FFFFFFF)
+#  define CURL_OFF_T_MAX (0x7FFFFFFFLL)
 #else
    /* assume SIZEOF_CURL_OFF_T == 8 */
 #  define CURL_OFF_T_MAX CURL_OFF_T_C(0x7FFFFFFFFFFFFFFF)
 #endif
-#define CURL_OFF_T_MIN (-CURL_OFF_T_MAX - CURL_OFF_T_C(1))
+#define CURL_OFF_T_MIN (-CURL_OFF_T_MAX - (1LL))
 
 #if (SIZEOF_TIME_T == 4)
 #  ifdef HAVE_TIME_T_UNSIGNED
diff --git a/lib/progress.c b/lib/progress.c
index f5ef6bd52..7b23b909d 100644
--- a/lib/progress.c
+++ b/lib/progress.c
@@ -42,19 +42,19 @@ static void time2str(char *r, curl_off_t seconds)
     strcpy(r, "--:--:--");
     return;
   }
-  h = seconds / CURL_OFF_T_C(3600);
-  if(h <= CURL_OFF_T_C(99)) {
-    curl_off_t m = (seconds - (h*CURL_OFF_T_C(3600))) / CURL_OFF_T_C(60);
-    curl_off_t s = (seconds - (h*CURL_OFF_T_C(3600))) - (m*CURL_OFF_T_C(60));
+  h = seconds / (3600LL);
+  if(h <= (99LL)) {
+    curl_off_t m = (seconds - (h*(3600LL))) / (60LL);
+    curl_off_t s = (seconds - (h*(3600LL))) - (m*(60LL));
     msnprintf(r, 9, "%2" CURL_FORMAT_CURL_OFF_T ":%02" CURL_FORMAT_CURL_OFF_T
               ":%02" CURL_FORMAT_CURL_OFF_T, h, m, s);
   }
   else {
     /* this equals to more than 99 hours, switch to a more suitable output
        format to fit within the limits. */
-    curl_off_t d = seconds / CURL_OFF_T_C(86400);
-    h = (seconds - (d*CURL_OFF_T_C(86400))) / CURL_OFF_T_C(3600);
-    if(d <= CURL_OFF_T_C(999))
+    curl_off_t d = seconds / (86400LL);
+    h = (seconds - (d*(86400LL))) / (3600LL);
+    if(d <= (999LL))
       msnprintf(r, 9, "%3" CURL_FORMAT_CURL_OFF_T
                 "d %02" CURL_FORMAT_CURL_OFF_T "h", d, h);
     else
@@ -67,23 +67,23 @@ static void time2str(char *r, curl_off_t seconds)
    Add suffix k, M, G when suitable... */
 static char *max5data(curl_off_t bytes, char *max5)
 {
-#define ONE_KILOBYTE  CURL_OFF_T_C(1024)
-#define ONE_MEGABYTE (CURL_OFF_T_C(1024) * ONE_KILOBYTE)
-#define ONE_GIGABYTE (CURL_OFF_T_C(1024) * ONE_MEGABYTE)
-#define ONE_TERABYTE (CURL_OFF_T_C(1024) * ONE_GIGABYTE)
-#define ONE_PETABYTE (CURL_OFF_T_C(1024) * ONE_TERABYTE)
+#define ONE_KILOBYTE  (1024LL)
+#define ONE_MEGABYTE ((1024LL) * ONE_KILOBYTE)
+#define ONE_GIGABYTE ((1024LL) * ONE_MEGABYTE)
+#define ONE_TERABYTE ((1024LL) * ONE_GIGABYTE)
+#define ONE_PETABYTE ((1024LL) * ONE_TERABYTE)
 
-  if(bytes < CURL_OFF_T_C(100000))
+  if(bytes < (100000LL))
     msnprintf(max5, 6, "%5" CURL_FORMAT_CURL_OFF_T, bytes);
 
-  else if(bytes < CURL_OFF_T_C(10000) * ONE_KILOBYTE)
+  else if(bytes < (10000LL) * ONE_KILOBYTE)
     msnprintf(max5, 6, "%4" CURL_FORMAT_CURL_OFF_T "k", bytes/ONE_KILOBYTE);
 
-  else if(bytes < CURL_OFF_T_C(100) * ONE_MEGABYTE)
+  else if(bytes < (100LL) * ONE_MEGABYTE)
     /* 'XX.XM' is good as long as we're less than 100 megs */
     msnprintf(max5, 6, "%2" CURL_FORMAT_CURL_OFF_T ".%0"
               CURL_FORMAT_CURL_OFF_T "M", bytes/ONE_MEGABYTE,
-              (bytes%ONE_MEGABYTE) / (ONE_MEGABYTE/CURL_OFF_T_C(10)) );
+              (bytes%ONE_MEGABYTE) / (ONE_MEGABYTE/(10LL)) );
 
 #if (SIZEOF_CURL_OFF_T > 4)
 
@@ -286,7 +286,7 @@ timediff_t Curl_pgrsLimitWaitTime(curl_off_t cursize,
    * stay below 'limit'.
    */
   if(size < CURL_OFF_T_MAX/1000)
-    minimum = (timediff_t) (CURL_OFF_T_C(1000) * size / limit);
+    minimum = (timediff_t) ((1000LL) * size / limit);
   else {
     minimum = (timediff_t) (size / limit);
     if(minimum < TIMEDIFF_T_MAX/1000)
@@ -439,7 +439,7 @@ static bool progress_calc(struct Curl_easy *data, struct curltime now)
       /* Calculate the average speed the last 'span_ms' milliseconds */
       amount = p->speeder[nowindex]- p->speeder[checkindex];
 
-      if(amount > CURL_OFF_T_C(4294967) /* 0xffffffff/1000 */)
+      if(amount > (4294967LL) /* 0xffffffff/1000 */)
         /* the 'amount' value is bigger than would fit in 32 bits if
            multiplied with 1000, so we use the double math for this */
         p->current_speed = (curl_off_t)
@@ -447,7 +447,7 @@ static bool progress_calc(struct Curl_easy *data, struct curltime now)
       else
         /* the 'amount' value is small enough to fit within 32 bits even
            when multiplied with 1000 */
-        p->current_speed = amount*CURL_OFF_T_C(1000)/span_ms;
+        p->current_speed = amount*(1000LL)/span_ms;
     }
     else
       /* the first second we use the average */
@@ -491,26 +491,26 @@ static void progress_meter(struct Curl_easy *data)
 
   /* Figure out the estimated time of arrival for the upload */
   if((data->progress.flags & PGRS_UL_SIZE_KNOWN) &&
-     (data->progress.ulspeed > CURL_OFF_T_C(0))) {
+     (data->progress.ulspeed > (0LL))) {
     ulestimate = data->progress.size_ul / data->progress.ulspeed;
 
-    if(data->progress.size_ul > CURL_OFF_T_C(10000))
+    if(data->progress.size_ul > (10000LL))
       ulpercen = data->progress.uploaded /
-        (data->progress.size_ul/CURL_OFF_T_C(100));
-    else if(data->progress.size_ul > CURL_OFF_T_C(0))
+        (data->progress.size_ul/(100LL));
+    else if(data->progress.size_ul > (0LL))
       ulpercen = (data->progress.uploaded*100) /
         data->progress.size_ul;
   }
 
   /* ... and the download */
   if((data->progress.flags & PGRS_DL_SIZE_KNOWN) &&
-     (data->progress.dlspeed > CURL_OFF_T_C(0))) {
+     (data->progress.dlspeed > (0LL))) {
     dlestimate = data->progress.size_dl / data->progress.dlspeed;
 
-    if(data->progress.size_dl > CURL_OFF_T_C(10000))
+    if(data->progress.size_dl > (10000LL))
       dlpercen = data->progress.downloaded /
-        (data->progress.size_dl/CURL_OFF_T_C(100));
-    else if(data->progress.size_dl > CURL_OFF_T_C(0))
+        (data->progress.size_dl/(100LL));
+    else if(data->progress.size_dl > (0LL))
       dlpercen = (data->progress.downloaded*100) /
         data->progress.size_dl;
   }
@@ -535,10 +535,10 @@ static void progress_meter(struct Curl_easy *data)
   total_transfer = data->progress.downloaded + data->progress.uploaded;
 
   /* Get the percentage of data transferred so far */
-  if(total_expected_transfer > CURL_OFF_T_C(10000))
+  if(total_expected_transfer > (10000LL))
     total_percen = total_transfer /
-      (total_expected_transfer/CURL_OFF_T_C(100));
-  else if(total_expected_transfer > CURL_OFF_T_C(0))
+      (total_expected_transfer/(100LL));
+  else if(total_expected_transfer > (0LL))
     total_percen = (total_transfer*100) / total_expected_transfer;
 
   fprintf(data->set.err,
diff --git a/src/tool_cb_prg.c b/src/tool_cb_prg.c
index 2a23fd911..0ad43e2d7 100644
--- a/src/tool_cb_prg.c
+++ b/src/tool_cb_prg.c
@@ -115,7 +115,7 @@ static void fly(struct ProgressData *bar, bool moved)
 #define MAX_BARLENGTH 256
 
 #if (SIZEOF_CURL_OFF_T == 4)
-#  define CURL_OFF_T_MAX CURL_OFF_T_C(0x7FFFFFFF)
+#  define CURL_OFF_T_MAX (0x7FFFFFFFLL)
 #else
    /* assume SIZEOF_CURL_OFF_T == 8 */
 #  define CURL_OFF_T_MAX CURL_OFF_T_C(0x7FFFFFFFFFFFFFFF)
diff --git a/src/tool_operate.c b/src/tool_operate.c
index ab09a65f1..0f2a2f3ac 100644
--- a/src/tool_operate.c
+++ b/src/tool_operate.c
@@ -1456,7 +1456,7 @@ static CURLcode single_transfer(struct GlobalConfig *global,
         if(config->use_resume)
           my_setopt(curl, CURLOPT_RESUME_FROM_LARGE, config->resume_from);
         else
-          my_setopt(curl, CURLOPT_RESUME_FROM_LARGE, CURL_OFF_T_C(0));
+          my_setopt(curl, CURLOPT_RESUME_FROM_LARGE, (0LL));
 
         my_setopt_str(curl, CURLOPT_KEYPASSWD, config->key_passwd);
         my_setopt_str(curl, CURLOPT_PROXY_KEYPASSWD, config->proxy_key_passwd);
diff --git a/src/tool_progress.c b/src/tool_progress.c
index 1358046e8..062e13cba 100644
--- a/src/tool_progress.c
+++ b/src/tool_progress.c
@@ -33,23 +33,23 @@
    Add suffix k, M, G when suitable... */
 static char *max5data(curl_off_t bytes, char *max5)
 {
-#define ONE_KILOBYTE  CURL_OFF_T_C(1024)
-#define ONE_MEGABYTE (CURL_OFF_T_C(1024) * ONE_KILOBYTE)
-#define ONE_GIGABYTE (CURL_OFF_T_C(1024) * ONE_MEGABYTE)
-#define ONE_TERABYTE (CURL_OFF_T_C(1024) * ONE_GIGABYTE)
-#define ONE_PETABYTE (CURL_OFF_T_C(1024) * ONE_TERABYTE)
+#define ONE_KILOBYTE  (1024LL)
+#define ONE_MEGABYTE ((1024LL) * ONE_KILOBYTE)
+#define ONE_GIGABYTE ((1024LL) * ONE_MEGABYTE)
+#define ONE_TERABYTE ((1024LL) * ONE_GIGABYTE)
+#define ONE_PETABYTE ((1024LL) * ONE_TERABYTE)
 
-  if(bytes < CURL_OFF_T_C(100000))
+  if(bytes < (100000LL))
     msnprintf(max5, 6, "%5" CURL_FORMAT_CURL_OFF_T, bytes);
 
-  else if(bytes < CURL_OFF_T_C(10000) * ONE_KILOBYTE)
+  else if(bytes < (10000LL) * ONE_KILOBYTE)
     msnprintf(max5, 6, "%4" CURL_FORMAT_CURL_OFF_T "k", bytes/ONE_KILOBYTE);
 
-  else if(bytes < CURL_OFF_T_C(100) * ONE_MEGABYTE)
+  else if(bytes < (100LL) * ONE_MEGABYTE)
     /* 'XX.XM' is good as long as we're less than 100 megs */
     msnprintf(max5, 6, "%2" CURL_FORMAT_CURL_OFF_T ".%0"
               CURL_FORMAT_CURL_OFF_T "M", bytes/ONE_MEGABYTE,
-              (bytes%ONE_MEGABYTE) / (ONE_MEGABYTE/CURL_OFF_T_C(10)) );
+              (bytes%ONE_MEGABYTE) / (ONE_MEGABYTE/(10LL)) );
 
 #if (SIZEOF_CURL_OFF_T > 4)
 
@@ -121,19 +121,19 @@ static void time2str(char *r, curl_off_t seconds)
     strcpy(r, "--:--:--");
     return;
   }
-  h = seconds / CURL_OFF_T_C(3600);
-  if(h <= CURL_OFF_T_C(99)) {
-    curl_off_t m = (seconds - (h*CURL_OFF_T_C(3600))) / CURL_OFF_T_C(60);
-    curl_off_t s = (seconds - (h*CURL_OFF_T_C(3600))) - (m*CURL_OFF_T_C(60));
+  h = seconds / (3600LL);
+  if(h <= (99LL)) {
+    curl_off_t m = (seconds - (h*(3600LL))) / (60LL);
+    curl_off_t s = (seconds - (h*(3600LL))) - (m*(60LL));
     msnprintf(r, 9, "%2" CURL_FORMAT_CURL_OFF_T ":%02" CURL_FORMAT_CURL_OFF_T
               ":%02" CURL_FORMAT_CURL_OFF_T, h, m, s);
   }
   else {
     /* this equals to more than 99 hours, switch to a more suitable output
        format to fit within the limits. */
-    curl_off_t d = seconds / CURL_OFF_T_C(86400);
-    h = (seconds - (d*CURL_OFF_T_C(86400))) / CURL_OFF_T_C(3600);
-    if(d <= CURL_OFF_T_C(999))
+    curl_off_t d = seconds / (86400LL);
+    h = (seconds - (d*(86400LL))) / (3600LL);
+    if(d <= (999LL))
       msnprintf(r, 9, "%3" CURL_FORMAT_CURL_OFF_T
                 "d %02" CURL_FORMAT_CURL_OFF_T "h", d, h);
     else
